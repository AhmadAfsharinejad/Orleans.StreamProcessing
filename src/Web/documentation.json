{
    "pipes": [],
    "interfaces": [
        {
            "name": "PluginBoxInfo",
            "id": "interface-PluginBoxInfo-5e784655b09aed9e79a441985c3c28b129a697add0f7fea5dafea269335481ada7109ce2d59f03637d9da5db3cc29b4056263e2d259a641f002bf9be10d568d4",
            "file": "src/app/plugin/plugin-box/plugin-box-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginTypeId} from \"../../plugin-dto/plugin-type-id\";\r\nimport {PluginId} from \"../../plugin-dto/plugin-id\";\r\n\r\nexport interface PluginBoxInfo {\r\n    label: string;\r\n    pluginTypeId: PluginTypeId;\r\n    iconPath: string;\r\n    id: PluginId;\r\n}\r\n",
            "properties": [
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginId",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pluginTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginTypeId",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginConfig",
            "id": "interface-PluginConfig-fae21d7113d563997996b9c09a8e0573490e300e51ec0c4c325fc155d41a13e498bbf61c7d5d19e920ba41e6b4e812fe5182253dd0843df6c78f52029cd5ea5a",
            "file": "src/app/plugin-dto/plugin-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginPropertiesTab} from \"./plugin-properties-tab\";\r\nimport {PluginId} from \"./plugin-id\";\r\n\r\nexport interface PluginConfig {\r\n    propertiesTabs: PluginPropertiesTab[];\r\n    id: PluginId;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginId",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "propertiesTabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginPropertiesTab[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginId",
            "id": "interface-PluginId-673d39c770b612109f43d15a5ee067e345f79e69bdff8787ab806fd2fc41022f7ed078fb1bb66a071d396c8022ab6c6101476258a327b9b988c4666d87511f11",
            "file": "src/app/plugin-dto/plugin-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PluginId {\r\n    value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginMetadataInfo",
            "id": "interface-PluginMetadataInfo-b9b3c263d74ad69f4b57b82c7523d8b9213dc7a8704f158e2ec4a3fad0771500bac8ae3d7fca0ab2fd4a0228e41335b8559a5414bceee5726ac8e2309d241a77",
            "file": "src/app/plugin-dto/plugin-metadata-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginTypeId} from \"./plugin-type-id\";\r\n\r\nexport interface PluginMetadataInfo {\r\n  name: string;\r\n  pluginTypeId: PluginTypeId;\r\n  iconPath: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pluginTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginTypeId",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginPropertiesTab",
            "id": "interface-PluginPropertiesTab-39aafb5864d34d9d6e9d05f7c9b61ab0e71043caa661e3331c59b0f6316e3821eec44301318dc6b19c7101aa80129d7abe5f35214524cc12c5165d1a8b5568a8",
            "file": "src/app/plugin-dto/plugin-properties-tab.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginProperty} from \"./plugin-property\";\r\n\r\nexport interface PluginPropertiesTab {\r\n    name: string;\r\n    properties: PluginProperty[];\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginProperty[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginProperty",
            "id": "interface-PluginProperty-0c19a663d86c4b2d831bf9d996f71f4181734959577c5a526ff55ff1f365e35781a8e770068aefa80fa1ee46f9047e5eb01ee036e9043d1e1f76dde7d1ed7acf",
            "file": "src/app/plugin-dto/plugin-property.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginUiType} from \"./plugin-ui-type\";\r\n\r\nexport interface PluginProperty {\r\n    name: string;\r\n    value: any;\r\n    type: PluginUiType;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginUiType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginToolboxInfo",
            "id": "interface-PluginToolboxInfo-ad003f0c5739167129e26555bde5d7b985862564d39bda0407ef7e72a533bd4973cd2a43c7f18790d95666c7a0569831a9c1761783f42f2be1e6ad1da687e1f8",
            "file": "src/app/plugin-dto/plugin-toolbox-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {PluginTypeId} from \"./plugin-type-id\";\r\n\r\nexport interface PluginToolboxInfo {\r\n    displayName: string;\r\n    pluginTypeId: PluginTypeId;\r\n    iconPath: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pluginTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginTypeId",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PluginTypeId",
            "id": "interface-PluginTypeId-e4ed4e0f0034965eb0802b18bd3c2ad3b346d838f4abb626da78c8cad6f6e28c73531a0508761278cbc02beb3606a167844ebd575e6a4553ad155f71ce65c0e5",
            "file": "src/app/plugin-dto/plugin-type-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PluginTypeId {\r\n    value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "GraphService",
            "id": "injectable-GraphService-1005cf681c123be6e1192b3fe86c12c16fbbe2b84eb90464d8e84aa2beff3db75828c16951f4b04a94f9ca698756918a35f555caffcc71d993827e641ee02121",
            "file": "src/app/scenario-service/graph/graph.service.ts",
            "properties": [
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "linkId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linkId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNode",
                    "args": [
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pluginId",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pluginId",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initGraph",
                    "args": [
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphContainerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphContainerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {Graph} from \"@antv/x6\";\r\nimport {PluginTypeId} from \"../../plugin-dto/plugin-type-id\";\r\nimport {PluginId} from \"../../plugin-dto/plugin-id\";\r\nimport {PluginBoxProviderService} from \"../../plugin-service/plugin-box-provider/plugin-box-provider.service\";\r\nimport {TempLinkHandlerService} from \"../temp-link-handler/temp-link-handler.service\";\r\nimport {NodeConfigHandlerService} from \"../node-config-handler/node-config-handler.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GraphService {\r\n    private graph!: Graph;\r\n\r\n    constructor(private pluginBoxProviderService: PluginBoxProviderService,\r\n                private tempLinkHandlerService: TempLinkHandlerService,\r\n                private nodeConfigHandlerService: NodeConfigHandlerService) {\r\n    }\r\n\r\n    initGraph(graph: Graph, graphContainerId: string): void {\r\n        this.graph = graph;\r\n\r\n        this.tempLinkHandlerService.initGraph(this, graph, graphContainerId);\r\n        this.nodeConfigHandlerService.initGraph(graph);\r\n    }\r\n\r\n    addNode(pluginTypeId: PluginTypeId, pluginId: PluginId, x: number, y: number): void {\r\n\r\n        let plugin = this.pluginBoxProviderService.getPlugin(pluginTypeId, pluginId);\r\n\r\n        this.graph.addNode({\r\n            shape: 'plugin-box-node',\r\n            x: (x - 30),\r\n            y: (y - 30),\r\n            id: pluginId.value,\r\n            label: 'world',\r\n            width: 100,\r\n            height: 100,\r\n            data: {\r\n                ngArguments: {\r\n                    plugin: plugin\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    addLink(source: string, target: string, linkId: string): void {\r\n        this.graph.addEdge({\r\n            source: source,\r\n            target: target,\r\n            id: linkId\r\n        });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluginBoxProviderService",
                        "type": "PluginBoxProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tempLinkHandlerService",
                        "type": "TempLinkHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeConfigHandlerService",
                        "type": "NodeConfigHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "pluginBoxProviderService",
                        "type": "PluginBoxProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tempLinkHandlerService",
                        "type": "TempLinkHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeConfigHandlerService",
                        "type": "NodeConfigHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NodeConfigHandlerService",
            "id": "injectable-NodeConfigHandlerService-f11f02fc779fcf9d4f2b4177f4726660e4c1a75735fa1ebee845c72b13024c46386ded7706c839995353b31f63b7b9101ca5a6345f5b5aa08aaf2954af0ff574",
            "file": "src/app/scenario-service/node-config-handler/node-config-handler.service.ts",
            "properties": [
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initGraph",
                    "args": [
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {Graph} from \"@antv/x6\";\r\nimport {PluginConfigShowService} from \"../../plugin-service/plugin-config-show/plugin-config-show.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NodeConfigHandlerService {\r\n    private graph!: Graph;\r\n\r\n    constructor(private pluginConfigShowService: PluginConfigShowService) {\r\n    }\r\n\r\n    initGraph(graph: Graph): void {\r\n        this.graph = graph;\r\n\r\n        graph.on('node:dblclick', ({node}) => this.pluginConfigShowService.show({value: node.id}));\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluginConfigShowService",
                        "type": "PluginConfigShowService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "pluginConfigShowService",
                        "type": "PluginConfigShowService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PluginBoxProviderService",
            "id": "injectable-PluginBoxProviderService-e76b115d65e882ff73f1c2a1223a11d32b5fc71bc9325854ce01d213d6092f26a6e40556e5b03aa4e8685c7494f79059aa3991394f03b629bc78c6eb20c1d293",
            "file": "src/app/plugin-service/plugin-box-provider/plugin-box-provider.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPlugin",
                    "args": [
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PluginBoxInfo",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginBoxInfo} from \"../../plugin/plugin-box/plugin-box-info\";\r\nimport {PluginTypeId} from \"../../plugin-dto/plugin-type-id\";\r\nimport {PluginId} from \"../../plugin-dto/plugin-id\";\r\nimport {PluginMetadataProviderService} from \"../plugin-metadata-provider/plugin-metadata-provider.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PluginBoxProviderService {\r\n\r\n  constructor(private pluginMetadataProviderService: PluginMetadataProviderService) {\r\n  }\r\n\r\n  getPlugin(pluginTypeId: PluginTypeId, id: PluginId): PluginBoxInfo {\r\n\r\n    let plugin = this.pluginMetadataProviderService.getPlugin(pluginTypeId);\r\n\r\n    return {pluginTypeId: pluginTypeId, id: id, label: plugin.name, iconPath: plugin.iconPath};\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluginMetadataProviderService",
                        "type": "PluginMetadataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "pluginMetadataProviderService",
                        "type": "PluginMetadataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PluginConfigGetService",
            "id": "injectable-PluginConfigGetService-b114899f039345bca736b4427312236ad46c8cb8a22a4e397b7edc101609189cc86fb386a1f6a9adfe3bb8fdf59f0d5d29069fe40f969c1c73068f0aef05eda8",
            "file": "src/app/plugin-service/plugin-config-get/plugin-config-get.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PluginConfig>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginUiType} from \"../../plugin-dto/plugin-ui-type\";\r\nimport {PluginId} from \"../../plugin-dto/plugin-id\";\r\nimport {PluginConfig} from \"../../plugin-dto/plugin-config\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PluginConfigGetService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    async get(id: PluginId): Promise<PluginConfig> {\r\n        //TODO\r\n        return {\r\n            id: id,\r\n            propertiesTabs: [{\r\n                properties: [{\r\n                    name: 'c1',\r\n                    type: PluginUiType.BOOLEAN,\r\n                    value: true\r\n                },\r\n                    {\r\n                        name: 'c2222222222',\r\n                        type: PluginUiType.INTEGER,\r\n                        value: 12\r\n                    }],\r\n                name: 't1'\r\n            }, {\r\n                properties: [{\r\n                    name: 'c1',\r\n                    type: PluginUiType.TEXT,\r\n                    value: 'Hi'\r\n                },\r\n                    {\r\n                        name: 'c2',\r\n                        type: PluginUiType.FLOAT,\r\n                        value: 12.2\r\n                    }],\r\n                name: 'tab2222'\r\n            }]\r\n        };\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PluginConfigSetService",
            "id": "injectable-PluginConfigSetService-cc73cb66b1f8a3a28b33cf1ceb9bf28b05e7851864a05c92fc6a0d78e8f05498c2cc414555959d343e4b778d3fce9960cc000cb29fb222afcf054a068903ce7b",
            "file": "src/app/plugin-service/plugin-config-set/plugin-config-set.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "config",
                            "type": "PluginConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "PluginConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginConfig} from \"../../plugin-dto/plugin-config\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PluginConfigSetService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    async set(config: PluginConfig): Promise<void> {\r\n        console.log(config);\r\n        //TODO\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PluginConfigShowService",
            "id": "injectable-PluginConfigShowService-2759f7cf7030e4e19d3675a5b3dc2b2becc01e06997e9982b32c78f0d0a2a8badbe46a62974eaa75dd1d8538b825a7718480193bce059ed9875bf74179a42d3d",
            "file": "src/app/plugin-service/plugin-config-show/plugin-config-show.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "PluginId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginId} from \"../../plugin-dto/plugin-id\";\r\nimport {PluginConfigGetService} from \"../plugin-config-get/plugin-config-get.service\";\r\nimport {NzModalService} from \"ng-zorro-antd/modal\";\r\nimport {PluginPropertiesTabComponent} from \"../../plugin/plugin-properties-tab/plugin-properties-tab.component\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PluginConfigShowService {\r\n\r\n    constructor(private modalService: NzModalService,\r\n                private pluginConfigGetService: PluginConfigGetService) {\r\n    }\r\n\r\n    async show(id: PluginId): Promise<void> {\r\n\r\n        let config = await this.pluginConfigGetService.get(id);\r\n\r\n        this.modalService.create({\r\n            nzTitle: 'cnf',\r\n            nzContent: PluginPropertiesTabComponent,\r\n            nzFooter: null,\r\n            nzClosable: false,\r\n            nzMaskClosable: false,\r\n            nzWidth: 600,\r\n            nzStyle: {},\r\n            nzBodyStyle: {padding: '5px', height: '350px'},\r\n            nzData: config,\r\n        });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pluginConfigGetService",
                        "type": "PluginConfigGetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pluginConfigGetService",
                        "type": "PluginConfigGetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PluginMetadataProviderService",
            "id": "injectable-PluginMetadataProviderService-e0c7cb8ace789bc4705ec4ebce3bbff53ff8b4cd0df7a23191e10c25a1e9f598afba0f9878e89efd584cc13312216f7b6eb919743b24cff7ce9079fae9ebb5ab",
            "file": "src/app/plugin-service/plugin-metadata-provider/plugin-metadata-provider.service.ts",
            "properties": [
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginMetadataInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "fetchPlugins",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PluginMetadataInfo[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getPlugin",
                    "args": [
                        {
                            "name": "typeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PluginMetadataInfo",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlugins",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PluginMetadataInfo[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginMetadataInfo} from \"../../plugin-dto/plugin-metadata-info\";\r\nimport {PluginTypeId} from \"../../plugin-dto/plugin-type-id\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PluginMetadataProviderService {\r\n  plugins!: PluginMetadataInfo[];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  async getPlugins(): Promise<PluginMetadataInfo[]> {\r\n\r\n    if (this.plugins) return this.plugins;\r\n\r\n    this.plugins = await this.fetchPlugins();\r\n\r\n    return this.plugins;\r\n  }\r\n\r\n  getPlugin(typeId: PluginTypeId) : PluginMetadataInfo{\r\n    return this.plugins.find(x => x.pluginTypeId.value == typeId.value)!;\r\n  }\r\n\r\n  private async fetchPlugins(): Promise<PluginMetadataInfo[]> {\r\n    return [\r\n      {\r\n        name: 'Http Listener',\r\n        iconPath: 'assets/img/plugin-icons/http-listener.png',\r\n        pluginTypeId: {value: 'HttpListener'}\r\n      },\r\n      {name: 'Map', iconPath: 'assets/img/plugin-icons/map.png', pluginTypeId: {value: 'Map'}},\r\n      {name: 'Filter', iconPath: 'assets/img/plugin-icons/filter.png', pluginTypeId: {value: 'Filter'}},\r\n      {\r\n        name: 'Sql Executor',\r\n        iconPath: 'assets/img/plugin-icons/sql-executor.png',\r\n        pluginTypeId: {value: 'SqlExecutor'}\r\n      },\r\n      {name: 'Rest', iconPath: 'assets/img/plugin-icons/rest.png', pluginTypeId: {value: 'Rest'}},\r\n      {\r\n        name: 'Http Response',\r\n        iconPath: 'assets/img/plugin-icons/http-response.png',\r\n        pluginTypeId: {value: 'HttpResponse'}\r\n      }\r\n    ];//TODO call engine\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TempLinkHandlerService",
            "id": "injectable-TempLinkHandlerService-f88a8f5e36e6403cb64d99c9decb271621a219afbd5c3d9b791466f4f787c69d0678c16c4b375ca0b88d8867989add56eff654895227e0264bff626da42d5161",
            "file": "src/app/scenario-service/temp-link-handler/temp-link-handler.service.ts",
            "properties": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "graphService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "keyUpHandler",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "mouseLeaveHandler",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "mouseMoveHandler",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "sourceNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tempEdge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Edge | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "targetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTempLink",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sourceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sourceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initGraph",
                    "args": [
                        {
                            "name": "graphService",
                            "type": "GraphService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphContainerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "graphService",
                            "type": "GraphService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graph",
                            "type": "Graph",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphContainerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTempLink",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodeClicked",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTempLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {Graph, Edge} from \"@antv/x6\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {GraphService} from \"../graph/graph.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TempLinkHandlerService {\r\n    private graph!: Graph;\r\n    private container!: HTMLElement | null;\r\n    private sourceNodeId!: string | null;\r\n    private tempEdge!: Edge | null;\r\n    private graphService!: GraphService;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    initGraph(graphService: GraphService, graph: Graph, graphContainerId: string): void {\r\n        this.graph = graph;\r\n        this.graphService = graphService;\r\n\r\n        graph.on('node:click', ({x, y, node}) => this.nodeClicked(x, y, node.id));\r\n\r\n        this.container = document.getElementById(graphContainerId);\r\n    }\r\n\r\n    nodeClicked(x: number, y: number, id: string): void {\r\n\r\n        if (!this.sourceNodeId) {\r\n            this.addTempLink(x, y, id);\r\n            return;\r\n        }\r\n\r\n        if (this.sourceNodeId == id) {\r\n            this.clear();\r\n            return;\r\n        }\r\n\r\n        this.removeTempLink();\r\n        this.addLink(id);\r\n        this.clear();\r\n    }\r\n\r\n    addTempLink(x: number, y: number, sourceId: string): void {\r\n        this.clear();\r\n        this.sourceNodeId = sourceId;\r\n        this.container!.addEventListener(\"mousemove\", this.mouseMoveHandler);\r\n        this.container!.addEventListener(\"mouseleave\", this.mouseLeaveHandler);\r\n        document.addEventListener('keyup', this.keyUpHandler);\r\n\r\n        this.tempEdge = this.graph.addEdge({\r\n            source: sourceId,\r\n            target: {\r\n                x: x,\r\n                y: y\r\n            }\r\n        });\r\n\r\n        //to stop conflict with double-clicked, we set visible to false. if mouse move ve set it to true\r\n        this.tempEdge.visible = false;\r\n    }\r\n\r\n    moveTempLink(x: number, y: number): void {\r\n        this.tempEdge!.setTarget({\r\n            x: x,\r\n            y: y\r\n        });\r\n        this.tempEdge!.visible = true;\r\n    }\r\n\r\n    removeTempLink(): void {\r\n        if (!this.tempEdge) return;\r\n\r\n        this.graph.removeEdge(this.tempEdge);\r\n    }\r\n\r\n    addLink(targetId: string): void {\r\n        this.graphService.addLink(this.sourceNodeId!, targetId, uuidv4());\r\n    }\r\n\r\n    clear(): void {\r\n        this.removeTempLink();\r\n        this.sourceNodeId = null;\r\n        this.tempEdge = null;\r\n        this.container!.removeEventListener(\"mousemove\", this.mouseMoveHandler);\r\n        this.container!.removeEventListener(\"mouseleave\", this.mouseLeaveHandler);\r\n        document.removeEventListener('keyup', this.keyUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (e: MouseEvent): void => {\r\n        this.moveTempLink(e.offsetX, e.offsetY);\r\n    };\r\n\r\n    mouseLeaveHandler = (): void => {\r\n        this.clear();\r\n    };\r\n\r\n    keyUpHandler = (e: KeyboardEvent): void => {\r\n\r\n        if(e.key === \"Escape\"){\r\n            this.clear();\r\n        }\r\n    };\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToolboxProviderService",
            "id": "injectable-ToolboxProviderService-54cc652fea1bd07347c0829e184fc77c008cb96cab7802b865053e049f7445942a9cc702778580750dcff6ccbc36371ddb36c00b4789047e0ecb71d20df37098",
            "file": "src/app/plugin-service/toolbox-provider/toolbox-provider.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPlugins",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PluginToolboxInfo[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "map",
                    "args": [
                        {
                            "name": "info",
                            "type": "PluginMetadataInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PluginToolboxInfo",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "info",
                            "type": "PluginMetadataInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PluginToolboxInfo} from \"../../plugin-dto/plugin-toolbox-info\";\r\nimport {PluginMetadataProviderService} from \"../plugin-metadata-provider/plugin-metadata-provider.service\";\r\nimport {PluginMetadataInfo} from \"../../plugin-dto/plugin-metadata-info\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToolboxProviderService {\r\n\r\n  constructor(private pluginMetadataProviderService: PluginMetadataProviderService) {\r\n  }\r\n\r\n  async getPlugins(): Promise<PluginToolboxInfo[]> {\r\n\r\n    let plugins = await this.pluginMetadataProviderService.getPlugins();\r\n    return plugins.map(x => this.map(x));\r\n  }\r\n\r\n  map(info: PluginMetadataInfo): PluginToolboxInfo {\r\n    return {displayName: info.name, pluginTypeId: info.pluginTypeId, iconPath: info.iconPath};\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluginMetadataProviderService",
                        "type": "PluginMetadataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "pluginMetadataProviderService",
                        "type": "PluginMetadataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bde82abd18a35fcbd3a8f1fadfabe4c5b8ea1ad6c35e43792aa796925674d08976fb983419cf64d5e868807e8a6091d8109d2b48acca153a8c92fb681d1b10bf",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Web'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Web';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet/>\r\n"
        },
        {
            "name": "BasePluginComponent",
            "id": "component-BasePluginComponent-d0b50da6d4cebf5e7db62571e5eaa32908d7c3d3795aa011db67ddeef1454d88d66c649b2f8ca0e947dd7e8c973d358e6a733d279bd57a0a362e07b393137646",
            "file": "src/app/plugin/base-plugin/base-plugin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-plugin",
            "styleUrls": [
                "./base-plugin.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./base-plugin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "confirmed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isSpinning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "destroyModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "endProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Output} from '@angular/core';\r\nimport {NzModalRef} from \"ng-zorro-antd/modal\";\r\n\r\n@Component({\r\n    selector: 'app-base-plugin',\r\n    templateUrl: './base-plugin.component.html',\r\n    styleUrls: ['./base-plugin.component.css']\r\n})\r\nexport class BasePluginComponent {\r\n\r\n    @Output() confirmed: EventEmitter<void> = new EventEmitter();\r\n\r\n    isSpinning: boolean = false;\r\n\r\n    constructor(private modal: NzModalRef) {\r\n    }\r\n\r\n    cancelClicked() {\r\n        this.destroyModal();\r\n    }\r\n\r\n    async confirmClicked() {\r\n        this.confirmed.emit();\r\n    }\r\n\r\n    private destroyModal(): void {\r\n        this.modal.destroy();\r\n    }\r\n\r\n    closeModal() {\r\n        this.destroyModal();\r\n    }\r\n\r\n    startProgress() {\r\n        this.isSpinning = true;\r\n    }\r\n\r\n    endProgress() {\r\n        this.isSpinning = false;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: block;\r\n    height: 100%;\r\n}\r\n.main{\r\n    display: block;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n\r\n.spinnerContainer{\r\n    background-color: #edededed;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 2;\r\n}\r\n\r\n.spinner {\r\n    display: flex;\r\n    height: 100%;\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    #position: absolute;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.footer {\r\n    border-top: 1px solid #f0f0f0;\r\n    padding-top: 9px;\r\n    display: flex;\r\n    gap: 7px;\r\n    #align-self: flex-end;\r\n}\r\n\r\n.template {\r\n    padding-bottom: 20px;\r\n    flex: 1;\r\n}\r\n",
                    "styleUrl": "./base-plugin.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"main\">\r\n    <div *ngIf=\"isSpinning\" class=\"spinnerContainer\">\r\n        <nz-spin [nzSpinning]=\"isSpinning\" class=\"spinner\">\r\n        </nz-spin>\r\n    </div>\r\n\r\n    <div class=\"container\">\r\n        <div class=\"template\">\r\n            <ng-content></ng-content>\r\n        </div>\r\n\r\n        <div class=\"footer\">\r\n            <button nz-button nzType=\"default\" (click)=\"cancelClicked()\">Cancel</button>\r\n            <button nz-button nzType=\"primary\" (click)=\"confirmClicked()\">Confirm</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-b89a0ce60c7da5905a13a735416306e158724419df64b442b4ece3249b78bb959c97d926ad116dfce9c14e498097005d166db4c4d6a43f0a124cbab7f957284a",
            "file": "src/app/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [
                "./page-not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.css']\r\n})\r\nexport class PageNotFoundComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-not-found.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p>Page Not Found!</p>\r\n"
        },
        {
            "name": "PluginBoxComponent",
            "id": "component-PluginBoxComponent-12b8b0c81501261adafd937be38bc1fe892779bffd00182c666a5b18f0b0c79e8b6e2e04e69e7a93c685bd0def80a93eb21d516bf30c79ed5afaf1e69e054244",
            "file": "src/app/plugin/plugin-box/plugin-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-box",
            "styleUrls": [
                "./plugin-box.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plugin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "PluginBoxInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {PluginBoxInfo} from \"./plugin-box-info\";\r\n\r\n@Component({\r\n  selector: 'app-plugin-box',\r\n  templateUrl: './plugin-box.component.html',\r\n  styleUrls: ['./plugin-box.component.css']\r\n})\r\nexport class PluginBoxComponent {\r\n  @Input() plugin!: PluginBoxInfo;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.image-wrapper {\r\n  margin-bottom: 10px;\r\n  height: 5rem;\r\n  width: 5rem;\r\n  position: relative;\r\n}\r\n\r\n.label {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./plugin-box.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"plugin\" class=\"container\">\r\n\r\n    <div *ngIf=\"plugin.iconPath\"\r\n         class=\"image-wrapper\">\r\n\r\n        <img ngSrc=\"{{plugin.iconPath}}\"\r\n             alt=\"{{plugin.label}} plugin icon\"\r\n             fill=\"true\"\r\n             priority=\"true\"\r\n        />\r\n\r\n    </div>\r\n\r\n    <div class=\"label\">\r\n        {{plugin.label}}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "PluginPropertiesComponent",
            "id": "component-PluginPropertiesComponent-b2d0bfc7cfb11cd4d4e9d0c30ff3330a6e50463db27cf814c2c696813f95751d887ae0dcf6dedbd543fb5c2a84959720c742cfbc15899ab5b2d85ef42183b585",
            "file": "src/app/plugin/plugin-properties/plugin-properties.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-properties",
            "styleUrls": [
                "./plugin-properties.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-properties.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "PluginProperty[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "PluginUiType",
                    "defaultValue": "PluginUiType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {PluginProperty} from \"../../plugin-dto/plugin-property\";\r\nimport {PluginUiType} from \"../../plugin-dto/plugin-ui-type\";\r\n\r\n@Component({\r\n    selector: 'app-plugin-properties',\r\n    templateUrl: './plugin-properties.component.html',\r\n    styleUrls: ['./plugin-properties.component.css']\r\n})\r\nexport class PluginPropertiesComponent {\r\n    @Input() properties!: PluginProperty[];\r\n    protected readonly PluginUiType = PluginUiType;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    display: block;\r\n    height: 100%;\r\n}\r\n\r\ntd{\r\n    padding-bottom: 10px;\r\n    padding-left: 10px;\r\n}\r\n",
                    "styleUrl": "./plugin-properties.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<table>\r\n    <tbody>\r\n    <tr *ngFor=\"let property of properties\">\r\n        <td>{{property.name}}</td>\r\n        <td>\r\n            <input nz-input nzSize=\"default\" *ngIf=\"property.type == PluginUiType.TEXT\" [(ngModel)]=\"property.value\"/>\r\n            <nz-input-number [nzPrecision]=0 *ngIf=\"property.type == PluginUiType.INTEGER\"\r\n                             [(ngModel)]=\"property.value\"/>\r\n            <nz-input-number *ngIf=\"property.type == PluginUiType.FLOAT\" [(ngModel)]=\"property.value\"/>\r\n            <nz-checkbox *ngIf=\"property.type == PluginUiType.BOOLEAN\" [(ngModel)]=\"property.value\"></nz-checkbox>\r\n            <textarea nz-input *ngIf=\"property.type == PluginUiType.LargeTEXT\" [(ngModel)]=\"property.value\"></textarea>\r\n            <nz-time-picker *ngIf=\"property.type == PluginUiType.TimeSpan\"\r\n                            [(ngModel)]=\"property.value\"></nz-time-picker>\r\n            <nz-date-picker *ngIf=\"property.type == PluginUiType.Date\" [(ngModel)]=\"property.value\"></nz-date-picker>\r\n            <nz-date-picker [nzShowTime]=\"true\" *ngIf=\"property.type == PluginUiType.DateTime\"\r\n                            [(ngModel)]=\"property.value\"></nz-date-picker>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n"
        },
        {
            "name": "PluginPropertiesTabComponent",
            "id": "component-PluginPropertiesTabComponent-fe7c85c87252c2bbeccd55c1a842c92da738f215b968da5a6b3a57e8cd6c1a0f576db08a8590359fb258b4d3b6ff65fb512898ac7fab5744700dd3a542c603db",
            "file": "src/app/plugin/plugin-properties-tab/plugin-properties-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-properties-tab",
            "styleUrls": [
                "./plugin-properties-tab.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-properties-tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BasePluginComponent",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BasePluginComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "config",
                    "defaultValue": "inject(NZ_MODAL_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginConfig",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmed",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, ViewChild} from '@angular/core';\r\nimport {BasePluginComponent} from \"../base-plugin/base-plugin.component\";\r\nimport {NZ_MODAL_DATA} from \"ng-zorro-antd/modal\";\r\nimport {PluginConfigSetService} from \"../../plugin-service/plugin-config-set/plugin-config-set.service\";\r\nimport {PluginConfig} from \"../../plugin-dto/plugin-config\";\r\n\r\n@Component({\r\n    selector: 'app-plugin-properties-tab',\r\n    templateUrl: './plugin-properties-tab.component.html',\r\n    styleUrls: ['./plugin-properties-tab.component.css']\r\n})\r\nexport class PluginPropertiesTabComponent {\r\n    readonly config: PluginConfig = inject(NZ_MODAL_DATA);\r\n\r\n    @ViewChild(BasePluginComponent) child!: BasePluginComponent;\r\n\r\n    constructor(private pluginConfigSetService: PluginConfigSetService) {\r\n    }\r\n\r\n    async confirmed() {\r\n        this.child.startProgress();\r\n\r\n        try {\r\n            await this.pluginConfigSetService.set(this.config);\r\n            this.child.closeModal();\r\n        } catch (error) {\r\n            //TODO\r\n        } finally {\r\n            this.child.endProgress();\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    display: block;\r\n    height: 100%;\r\n}\r\n",
                    "styleUrl": "./plugin-properties-tab.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pluginConfigSetService",
                        "type": "PluginConfigSetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "pluginConfigSetService",
                        "type": "PluginConfigSetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-base-plugin (confirmed)=\"confirmed()\">\r\n    <nz-tabset nzType=\"card\">\r\n        <nz-tab *ngFor=\"let tab of config.propertiesTabs\" [nzTitle]=\"tab.name\">\r\n            <app-plugin-properties [properties]=\"tab.properties\"/>\r\n        </nz-tab>\r\n    </nz-tabset>\r\n</app-base-plugin>\r\n"
        },
        {
            "name": "PluginsToolboxComponent",
            "id": "component-PluginsToolboxComponent-e57feec2f890a0f8d0949123650c08981a513875c984f0a350d6ea3de4223eb86a7961456832bd2d8e7602a264d37258819163cea520653d7e4970b75e2371c9",
            "file": "src/app/plugin/plugins-toolbox/plugins-toolbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugins-toolbox",
            "styleUrls": [
                "./plugins-toolbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugins-toolbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PluginToolboxInfo[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onPluginDragStarted",
                    "args": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pluginTypeId",
                            "type": "PluginTypeId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {PluginToolboxInfo} from \"../../plugin-dto/plugin-toolbox-info\";\r\nimport {PluginTypeId} from \"../../plugin-dto/plugin-type-id\";\r\nimport {ToolboxProviderService} from \"../../plugin-service/toolbox-provider/toolbox-provider.service\";\r\n\r\n@Component({\r\n  selector: 'app-plugins-toolbox',\r\n  templateUrl: './plugins-toolbox.component.html',\r\n  styleUrls: ['./plugins-toolbox.component.css']\r\n})\r\nexport class PluginsToolboxComponent implements OnInit{\r\n  plugins?: PluginToolboxInfo[];\r\n\r\n  constructor(private toolboxProviderService: ToolboxProviderService) {\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.plugins = await this.toolboxProviderService.getPlugins();\r\n  }\r\n  onPluginDragStarted($event: DragEvent, pluginTypeId: PluginTypeId) {\r\n    $event.dataTransfer!.setData(\"text/plugin-type-id\", pluginTypeId.value);\r\n    //TODO handle event\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plugins-toolbox {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n",
                    "styleUrl": "./plugins-toolbox.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toolboxProviderService",
                        "type": "ToolboxProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "toolboxProviderService",
                        "type": "ToolboxProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"plugins-toolbox\">\r\n    <app-plugin-toolbox *ngFor=\"let plugin of plugins\"\r\n                        [draggable]=\"true\"\r\n                        [plugin]=\"plugin\"\r\n                        draggable=\"true\"\r\n                        (dragstart)=\"onPluginDragStarted($event, plugin.pluginTypeId)\">\r\n    </app-plugin-toolbox>\r\n</div>\r\n"
        },
        {
            "name": "PluginToolboxComponent",
            "id": "component-PluginToolboxComponent-64f7ed3df1ec9e9b55f697ab5a93445abe03d9eaea46bf5c3b17e21bd8085c784f8d88114d7578b5f9ca0820a94b128b1a3f69e24649253e33f6d123953a95a8",
            "file": "src/app/plugin/plugin-toolbox/plugin-toolbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-toolbox",
            "styleUrls": [
                "./plugin-toolbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-toolbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plugin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "PluginToolboxInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {PluginToolboxInfo} from \"../../plugin-dto/plugin-toolbox-info\";\r\n\r\n@Component({\r\n  selector: 'app-plugin-toolbox',\r\n  templateUrl: './plugin-toolbox.component.html',\r\n  styleUrls: ['./plugin-toolbox.component.css']\r\n})\r\nexport class PluginToolboxComponent {\r\n  @Input() plugin!: PluginToolboxInfo;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.image-wrapper {\r\n    height: 5rem;\r\n    width: 5rem;\r\n    position: relative;\r\n}\r\n",
                    "styleUrl": "./plugin-toolbox.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"plugin\" class=\"container\">\r\n    <div *ngIf=\"plugin.iconPath\"\r\n         class=\"image-wrapper\">\r\n\r\n        <img ngSrc=\"{{plugin.iconPath}}\"\r\n             alt=\"{{plugin.displayName}} plugin icon\"\r\n             fill=\"true\"\r\n             priority=\"true\"\r\n        />\r\n\r\n    </div>\r\n\r\n    <div>\r\n        {{plugin.displayName}}\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ScenarioDesignerComponent",
            "id": "component-ScenarioDesignerComponent-91f7dfb2fd9a52f6192cbb6b5c5db24462891b53238abff98e03bca35c0d003560adac9e6800770100a258a0fac1c7db84ec42c71d7ff8cf4ab9ac8ef1fb7697",
            "file": "src/app/scenario/scenario-designer/scenario-designer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-designer",
            "styleUrls": [
                "./scenario-designer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-designer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerShape",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, Injector, OnInit} from '@angular/core';\r\nimport {Graph} from \"@antv/x6\";\r\nimport {register} from '@antv/x6-angular-shape';\r\nimport {PluginBoxComponent} from \"../../plugin/plugin-box/plugin-box.component\";\r\nimport {GraphService} from \"../../scenario-service/graph/graph.service\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Component({\r\n  selector: 'app-scenario-designer',\r\n  templateUrl: './scenario-designer.component.html',\r\n  styleUrls: ['./scenario-designer.component.css']\r\n})\r\nexport class ScenarioDesignerComponent implements OnInit, AfterViewInit {\r\n  private graph!: Graph;\r\n\r\n  constructor(private injector: Injector, private graphService: GraphService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createGraph();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.registerShape();\r\n\r\n    this.graphService.initGraph(this.graph!, 'container');\r\n  }\r\n\r\n  registerShape(): void {\r\n    register({\r\n      shape: 'plugin-box-node',\r\n      content: PluginBoxComponent,\r\n      injector: this.injector,\r\n    })\r\n  }\r\n\r\n  createGraph(): void {\r\n    this.graph = new Graph({\r\n      container: document.getElementById('container')!,\r\n      autoResize: true,\r\n      grid: true,\r\n      connecting: {\r\n        allowBlank: false\r\n      },\r\n      background: {\r\n        color: '#afafaf',\r\n      },\r\n    });\r\n  }\r\n\r\n  onDragOver($event: DragEvent) {\r\n    $event.preventDefault();\r\n  }\r\n\r\n  onDrop($event: DragEvent) {\r\n    $event.preventDefault();\r\n    let data = $event.dataTransfer!.getData(\"text/plugin-type-id\");\r\n    if (!data) return;\r\n\r\n    this.graphService.addNode( {value: data}, {value: uuidv4()}, $event.offsetX, $event.offsetY);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".scenarioContainer {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n",
                    "styleUrl": "./scenario-designer.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphService",
                        "type": "GraphService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphService",
                        "type": "GraphService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"scenarioContainer\" (dragover)=\"onDragOver($event)\" (drop)=\"onDrop($event)\">\r\n  <div id=\"container\"></div>\r\n</div>\r\n"
        },
        {
            "name": "ScenarioPanelComponent",
            "id": "component-ScenarioPanelComponent-d17bd0f6fd3cc8f3c315b61af713d45d07ed0c4466dfb2886f19ddaf91c03004e4684514d2fb45a30702f08c9a32d33958bab35f935bcef494e91e22b4dec07a",
            "file": "src/app/scenario/scenario-panel/scenario-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-panel",
            "styleUrls": [
                "./scenario-panel.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-scenario-panel',\r\n  templateUrl: './scenario-panel.component.html',\r\n  styleUrls: ['./scenario-panel.component.css']\r\n})\r\nexport class ScenarioPanelComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    height: 100vh;\r\n}\r\n\r\n.tool-box {\r\n    flex: 0 0 200px;\r\n    background-color: #f2f2f2;\r\n}\r\n\r\n.scenario-designer {\r\n    flex: 1;\r\n}\r\n",
                    "styleUrl": "./scenario-panel.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\"> <!--TODO style-->\r\n    <app-plugins-toolbox class=\"tool-box\"></app-plugins-toolbox>\r\n\r\n    <app-scenario-designer class=\"scenario-designer\"></app-scenario-designer>\r\n</div>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d67c69b7b2a477d9026e5a3ea316f3d438d543f252235631bc036227a62cccd13613bcafeaa7aa3966965c1b9b64258f57b61d90b3a3aa7d37b37618706d03ba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ScenarioDesignerComponent } from './scenario/scenario-designer/scenario-designer.component';\r\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\r\nimport { ScenarioPanelComponent } from './scenario/scenario-panel/scenario-panel.component';\r\nimport { PluginBoxComponent } from './plugin/plugin-box/plugin-box.component';\r\nimport { PluginsToolboxComponent } from './plugin/plugins-toolbox/plugins-toolbox.component';\r\nimport { PluginToolboxComponent } from './plugin/plugin-toolbox/plugin-toolbox.component';\r\nimport {NgOptimizedImage} from \"@angular/common\";\r\nimport {RouterOutlet} from \"@angular/router\";\r\nimport { PluginPropertiesComponent } from './plugin/plugin-properties/plugin-properties.component';\r\nimport {NzTabsModule} from \"ng-zorro-antd/tabs\";\r\nimport { PluginPropertiesTabComponent } from './plugin/plugin-properties-tab/plugin-properties-tab.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {NzInputModule} from \"ng-zorro-antd/input\";\r\nimport {NzTimePickerModule} from \"ng-zorro-antd/time-picker\";\r\nimport {NzDatePickerModule} from \"ng-zorro-antd/date-picker\";\r\nimport {NzInputNumberModule} from \"ng-zorro-antd/input-number\";\r\nimport { BasePluginComponent } from './plugin/base-plugin/base-plugin.component';\r\nimport {NzButtonModule} from \"ng-zorro-antd/button\";\r\nimport {NzSpinModule} from \"ng-zorro-antd/spin\";\r\nimport {NzModalModule} from \"ng-zorro-antd/modal\";\r\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ScenarioDesignerComponent,\r\n    PageNotFoundComponent,\r\n    ScenarioPanelComponent,\r\n    PluginBoxComponent,\r\n    PluginsToolboxComponent,\r\n    PluginToolboxComponent,\r\n    PluginPropertiesComponent,\r\n    PluginPropertiesTabComponent,\r\n    BasePluginComponent\r\n  ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        NgOptimizedImage,\r\n        RouterOutlet,\r\n        NzTabsModule,\r\n        FormsModule,\r\n        NzInputModule,\r\n        NzTimePickerModule,\r\n        NzDatePickerModule,\r\n        NzInputNumberModule,\r\n        NzButtonModule,\r\n        NzSpinModule,\r\n        NzModalModule,\r\n        BrowserAnimationsModule\r\n    ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BasePluginComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "PluginBoxComponent"
                        },
                        {
                            "name": "PluginPropertiesComponent"
                        },
                        {
                            "name": "PluginPropertiesTabComponent"
                        },
                        {
                            "name": "PluginToolboxComponent"
                        },
                        {
                            "name": "PluginsToolboxComponent"
                        },
                        {
                            "name": "ScenarioDesignerComponent"
                        },
                        {
                            "name": "ScenarioPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgOptimizedImage"
                        },
                        {
                            "name": "RouterOutlet"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-36e7f1d901813947421a559a9be073e48f3473ca038f11300ea8009df9a5f0e7531d07399e8829d2ebbaacf4343aa2eb1cf665a8217fcc609cfad319742ab834",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {PageNotFoundComponent} from \"./page-not-found/page-not-found.component\";\r\nimport {ScenarioPanelComponent} from \"./scenario/scenario-panel/scenario-panel.component\";\r\n\r\nconst routes: Routes = [\r\n  {path: 'Scenario', component: ScenarioPanelComponent, title: 'Scenario'},\r\n  {path: '', redirectTo: '/Scenario', pathMatch: \"full\"},\r\n  {path: '**', component: PageNotFoundComponent}\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "PluginUiType",
                "childs": [
                    {
                        "name": "TEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "INTEGER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "FLOAT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "BOOLEAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "LargeTEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "TimeSpan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    },
                    {
                        "name": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 7
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/plugin-dto/plugin-ui-type.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/plugin-dto/plugin-ui-type.ts": [
                {
                    "name": "PluginUiType",
                    "childs": [
                        {
                            "name": "TEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "INTEGER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "FLOAT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "BOOLEAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "LargeTEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "TimeSpan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        },
                        {
                            "name": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 7
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/plugin-dto/plugin-ui-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "Scenario",
                        "component": "ScenarioPanelComponent",
                        "title": "Scenario"
                    },
                    {
                        "path": "",
                        "redirectTo": "/Scenario",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-metadata-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginMetadataInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-properties-tab.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginPropertiesTab",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-property.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginProperty",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-toolbox-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginToolboxInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-dto/plugin-type-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginTypeId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/plugin-box-provider/plugin-box-provider.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PluginBoxProviderService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/plugin-config-get/plugin-config-get.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PluginConfigGetService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/plugin-config-set/plugin-config-set.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PluginConfigSetService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/plugin-config-show/plugin-config-show.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PluginConfigShowService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/plugin-metadata-provider/plugin-metadata-provider.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PluginMetadataProviderService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin-service/toolbox-provider/toolbox-provider.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToolboxProviderService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/base-plugin/base-plugin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasePluginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugin-box/plugin-box-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PluginBoxInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugin-box/plugin-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugin-properties-tab/plugin-properties-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginPropertiesTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugin-properties/plugin-properties.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugin-toolbox/plugin-toolbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginToolboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plugin/plugins-toolbox/plugins-toolbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginsToolboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/scenario-service/graph/graph.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GraphService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/scenario-service/node-config-handler/node-config-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeConfigHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/scenario-service/temp-link-handler/temp-link-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TempLinkHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/scenario/scenario-designer/scenario-designer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioDesignerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/scenario/scenario-panel/scenario-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}